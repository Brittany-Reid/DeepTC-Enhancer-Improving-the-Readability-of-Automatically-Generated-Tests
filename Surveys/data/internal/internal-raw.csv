,Status,Progress,Duration (in seconds),Finished,RecipientLastName,RecipientFirstName,RecipientEmail,ExternalReference,DistributionChannel,UserLanguage,QID37,Q1.1,Q1.2_1,Q1.2_2,Q1.3,Q1.4,Q1.5,Q2.1,QID95,Q2.2,QID96,Q2.3,QID97,3.1,QID88,3.2,QID89,Q4.1_1,Q4.1_2,Q4.1_3,Q4.1_4,QID90,Q5.1,QID92,Q5.2,QID93,Q5.3,QID98,Q5.4_0_GROUP,Q5.4_1_GROUP,Q5.4_0_1_RANK,Q5.4_0_2_RANK,Q5.4_0_3_RANK,Q5.4_1_1_RANK,Q5.4_1_2_RANK,Q5.4_1_3_RANK,QID94,QID50
0,0,100,422,1,,,,,anonymous,EN,,1,20,,2,,,3,"test code should be readable, comments is adding noise and make the test class too ""fat""",1,Improving the variable names so that they convey the intent would be much nicer,2,Rigid phrasing that really isn't helpful,5,,3,"starting with ""test"" is useless. It is a test method.",2,1,2,2,"""style"" from AnsiStyle is quite bold, this particular example reads well but I don't see that working automatically for everything.",1,,3,,5,,"2,3",1,,1,2,1,,,,
1,0,100,1258,1,,,,,anonymous,EN,,1,20,4,2,,,3,The summary no additional information that could not be gleaned from a quick glance at the code itself.,3,"The summary provides no context as to the reason for the test case, aside from the fact that an exception is expected.  A good summary here would describe, at least, the context for the test and why the exception is expected.  Much like a ""given, when then"" description",1,The formatting and grammar is very good and is very easy to read.,2,No type does not really communicate the issue.  The exception would be thrown because newInstance expects an Interface and not an Object.  A better name would be shouldThrowExceptionIfNotAnInterface,1,Follows a well known pattern.  It's appropriate in this context.,1,3,4,1,"for builder, just replace it with type, so either feign or asyncFeign would communicate it better.  task3 is terrible, targetType or something similar would convey it better.",1,"It's put together cleanly.  However, I still feel that the summary is missing why this test case exists in the first place.  Just having a test case that generates an exception is not really useful unless that exception conveys something that a User will run into.",5,"This is completely a personal preference.  Test Cases exist to manage business cases so it takes domain knowledge to understand what makes a good test and what types of tests are required.  Generated ones like this one appear to me to, exist solely to meet arbitrary code coverage requirements. ",5,"Same elaboration as the previous question.  Domain Knowledge is required to build good, reliable test cases.  Automation from code inspection, selecting branches and the like, then generating a test case the explicitly executes that path with now domain context feels, again, like a way to hit arbitrary code coverage requirements.","1,3,2",,1,3,2,,,,,
2,0,13,6,0,,,,,anonymous,EN,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
3,0,100,1016,1,,,,,anonymous,EN,,1,21,,2,,,3,"I can read that info from the code. I'm going to read the code in the test anyway, just in case the javadoc is out of date. Also, for tests, I find inline comments more useful.",1,,1,,1,,1,,2,2,,,"They're probably as good as they can be.  Realistically, the test would need some text comments explaining the details of the test. The variable names on their own are not enough.",1,,1,,4,Afraid I'm quite skeptical about the idea of automatically generated tests for anything other than the most basic unit tests that require little or no scaffolding. Sorry. ,,,,,,,,,,
4,0,100,659,1,,,,,anonymous,EN,,1,12,3,2,,,1,"Question is, if javadoc doesn't contain much of the content. I personally prefer to rather look at the sources instead of javadoc to figure how exactly the test works etc, in the cases like this",1,,2,,4,,2,,2,1,,,,2,"I think for the more complicated unit tests, the improvement in readability will be more significant. By the way, just a note that we don't have any automated-generated mock tests in the Keycloak project",2,But my preference would be rather have manually written unit tests (as we have in Keycloak project).,4,,"3,2,1",,3,2,1,,,,"The tool looks like very nice stuff for the projects, which want to automatically generated tests. Crossing fingers to you for the future of this tool!",
5,0,100,480,1,,,,,anonymous,EN,,1,5,1,2,,,1,,1,,1,,4,,2,,1,2,1,,,1,,2,,5,,"2,1,3",,2,1,3,,,,,
6,0,100,831,1,,,,,anonymous,EN,,1,19,3,2,,,3,Tests code should be clear enough and tell a story about that they are asserting. Trying to summarize that is kind of redundant.,3,One of the main code paths being tested is how the map is populated with the parameters so that the URI is built accordingly.,1,,5,Path is not testing encoded parameters.,1,,2,3,1,,,2,,4,The example is misleading so that code is kind of useless to make sure whether or not we have coverage,3,"Most of the time I deal with integration tests, very few unit tests.","2,3",1,,1,2,1,,,,Congrats. Sounds promising.
