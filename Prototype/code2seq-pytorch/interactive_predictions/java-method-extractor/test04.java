/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 24 17:42:08 GMT 2020
 */
package org.springframework.boot.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.Map;
import java.util.concurrent.Callable;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;
import org.springframework.boot.json.BasicJsonParser;
import org.springframework.boot.json.YamlJsonParser;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class AbstractJsonParser_ESTest extends AbstractJsonParser_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test04() throws Throwable {
        BasicJsonParser a = new BasicJsonParser();
        MockThrowable b = new MockThrowable();
        MockException c = new MockException(b);
        Function<String, Exception> d = (Function<String, Exception>) mock(Function.class, new ViolatedAssumptionAnswer());
        doReturn(c).when(d).apply(anyString());
        Exception f = a.trimParse("", "", d);
        assertSame(f, c);
    }
}
